#pragma once

#include <atomic>
#include <vector>
#include <optional>

template <typename T>
class RingBuffer {
public:
    explicit RingBuffer(size_t capacity)
        : m_capacity(capacity), m_buffer(capacity), 
          m_head(0), m_tail(0) {}

    bool push(const T& item) {
        size_t head = m_head.load(std::memory_order_relaxed);
        size_t nextHead = (head + 1) % m_capacity;
        if (nextHead == m_tail.load(std::memory_order_acquire)) {
            // Buffer is full
            return false;
        }
        m_buffer[head] = item;
        m_head.store(nextHead, std::memory_order_release);
        return true;
    }

    std::optional<T> pop() {
        size_t tail = m_tail.load(std::memory_order_relaxed);
        if (tail == m_head.load(std::memory_order_acquire)) {
            // Buffer is empty
            return std::nullopt;
        }
        T item = m_buffer[tail];
        m_tail.store((tail + 1) % m_capacity, std::memory_order_release);
        return item;
    }

private:
    size_t m_capacity;
    std::vector<T> m_buffer;
    std::atomic<size_t> m_head;
    std::atomic<size_t> m_tail;
};
